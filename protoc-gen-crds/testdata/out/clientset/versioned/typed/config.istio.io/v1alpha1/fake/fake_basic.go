// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "istio.io/tools/protoc-gen-crds/testdata/out/config.istio.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeBasics implements BasicInterface
type FakeBasics struct {
	Fake *FakeConfigV1alpha1
	ns   string
}

var basicsResource = schema.GroupVersionResource{Group: "config.istio.io", Version: "v1alpha1", Resource: "basics"}

var basicsKind = schema.GroupVersionKind{Group: "config.istio.io", Version: "v1alpha1", Kind: "Basic"}

// Get takes name of the basic, and returns the corresponding basic object, and an error if there is any.
func (c *FakeBasics) Get(name string, options v1.GetOptions) (result *v1alpha1.Basic, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(basicsResource, c.ns, name), &v1alpha1.Basic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Basic), err
}

// List takes label and field selectors, and returns the list of Basics that match those selectors.
func (c *FakeBasics) List(opts v1.ListOptions) (result *v1alpha1.BasicList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(basicsResource, basicsKind, c.ns, opts), &v1alpha1.BasicList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.BasicList{ListMeta: obj.(*v1alpha1.BasicList).ListMeta}
	for _, item := range obj.(*v1alpha1.BasicList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested basics.
func (c *FakeBasics) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(basicsResource, c.ns, opts))

}

// Create takes the representation of a basic and creates it.  Returns the server's representation of the basic, and an error, if there is any.
func (c *FakeBasics) Create(basic *v1alpha1.Basic) (result *v1alpha1.Basic, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(basicsResource, c.ns, basic), &v1alpha1.Basic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Basic), err
}

// Update takes the representation of a basic and updates it. Returns the server's representation of the basic, and an error, if there is any.
func (c *FakeBasics) Update(basic *v1alpha1.Basic) (result *v1alpha1.Basic, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(basicsResource, c.ns, basic), &v1alpha1.Basic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Basic), err
}

// Delete takes name of the basic and deletes it. Returns an error if one occurs.
func (c *FakeBasics) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(basicsResource, c.ns, name), &v1alpha1.Basic{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBasics) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(basicsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.BasicList{})
	return err
}

// Patch applies the patch and returns the patched basic.
func (c *FakeBasics) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Basic, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(basicsResource, c.ns, name, data, subresources...), &v1alpha1.Basic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Basic), err
}
