// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	scheme "istio.io/tools/protoc-gen-crds/testdata/out/clientset/versioned/scheme"
	v1alpha1 "istio.io/tools/protoc-gen-crds/testdata/out/config.istio.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// BasicsGetter has a method to return a BasicInterface.
// A group's client should implement this interface.
type BasicsGetter interface {
	Basics(namespace string) BasicInterface
}

// BasicInterface has methods to work with Basic resources.
type BasicInterface interface {
	Create(*v1alpha1.Basic) (*v1alpha1.Basic, error)
	Update(*v1alpha1.Basic) (*v1alpha1.Basic, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.Basic, error)
	List(opts v1.ListOptions) (*v1alpha1.BasicList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Basic, err error)
	BasicExpansion
}

// basics implements BasicInterface
type basics struct {
	client rest.Interface
	ns     string
}

// newBasics returns a Basics
func newBasics(c *ConfigV1alpha1Client, namespace string) *basics {
	return &basics{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the basic, and returns the corresponding basic object, and an error if there is any.
func (c *basics) Get(name string, options v1.GetOptions) (result *v1alpha1.Basic, err error) {
	result = &v1alpha1.Basic{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("basics").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Basics that match those selectors.
func (c *basics) List(opts v1.ListOptions) (result *v1alpha1.BasicList, err error) {
	result = &v1alpha1.BasicList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("basics").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested basics.
func (c *basics) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("basics").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a basic and creates it.  Returns the server's representation of the basic, and an error, if there is any.
func (c *basics) Create(basic *v1alpha1.Basic) (result *v1alpha1.Basic, err error) {
	result = &v1alpha1.Basic{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("basics").
		Body(basic).
		Do().
		Into(result)
	return
}

// Update takes the representation of a basic and updates it. Returns the server's representation of the basic, and an error, if there is any.
func (c *basics) Update(basic *v1alpha1.Basic) (result *v1alpha1.Basic, err error) {
	result = &v1alpha1.Basic{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("basics").
		Name(basic.Name).
		Body(basic).
		Do().
		Into(result)
	return
}

// Delete takes name of the basic and deletes it. Returns an error if one occurs.
func (c *basics) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("basics").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *basics) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("basics").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched basic.
func (c *basics) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Basic, err error) {
	result = &v1alpha1.Basic{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("basics").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
